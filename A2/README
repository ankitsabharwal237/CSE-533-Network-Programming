README
======

CSE 533 Assignment 2 (Network Programming)
------------------------------------------
Authors: Ankit Sabharwal  (111463628)
         Himanshu Shah (109324380)

In this assignment, we have implemented a reliable file transfer service in a
multi-client/server environment on top of an existing UDP connection.
TCP like features have been implemented on top of existing UDP connection
to make the file transfer ordered and reliable.

Following are the some of the design details:


1. Ensuring Unicast Addresses via multiple listening sockets on the Server
==========================================================================

- Using Get_ifi_info_plus() we get all the interfaces and create UDP listening
  sockets for unicast addresses. We are NOT storing this interface information
  as we are retaining the list obtained from Get_ifi_info_plus().

- Next, for each client server connection, we maintain a list of all connections
  storing following information:

  - socketaddr_in structure of client address
  - Child Pid
  - Pointer to next node with client-server connection


2. Modifications done to the RTT library functions in rtt.c and unprtt.h 
========================================================================

- Smoothed Rtt and Variable Rtt is stored in multiples of 8 and 4 respectively.

- rtt_stop() function is modified to use integer shift operations.

- All measurements are done using integers rather than floats.

- All values are stored in terms of milliseconds.


3. ARQ Mechanisms
=================

Slow Start
----------
  The server will initially be in the slow start phase with cwin = 1.
  Then for every valid ACK received, we increase cwin by 1.
  Thus, for the 1st ACK, cwin increments from 1 to 2 and 2 packets are
  sent in the next iteration.
  This continues till the server either times out on an ACK or cwin >= SSThresh.
  (Initial value of SSThresh is set to sender's window size)

Congestion Avoidance (Additive-Increase/Multiplicative Decrease)
----------------------------------------------------------------
  Whenever the server times out or gets 3 consecutive duplicate
  acknowledgements, it moves from slow start to congestion avoidance phase.
  In this phase, the congestion window grows linearly rather than
  exponentially. The current cwin is halved and stored as the
  new SSThresh. Whenever the congestion window size grows beyond the SSThresh,
  the window size is increased linearly instead of exponential
  increase (AIMD). This is implemented by counting the number of valid acks and
  increasing cwin by 1 only when 'cwin' number of valid ACKs are received.

Handling Cumulative ACKs
------------------------
  When packet drops are triggered, the server receives DUP ACKs for lost packets.
  When the lost packets are retransmitted, the client may acknowledge multiple
  packets at once. This comes as a cumulative ACK to the server.

Fast Recovery
-------------
  When a packet is lost and the server times out, cwin is halved and assigned as
  new SSThresh. Server moves back to slow start phase with cwin = 1.
  It moves to congestion avoidance once cwin >= SSThresh.

Fast Retransmit
---------------
  When the server receives 3 DUP ACKs, it stops its timer and retransmits the
  lost packets immediately. In this process, it shrinks its cwin by half and
  stores this size as the new SSThresh. However, this time, instead of going
  back to the slow start phase, it directly starts from the congestion
  avoidance phase (i.e. newCwin = SSThresh = oldCwin/2).

Probe Message when Advertised WinSize = 0
------------------------------------------
  Whenever the client's advertised window becomes full (this happens when the
  consumer thread sleeps for a longer duration), it sends the next
  ACK with advertised window size of 0. When the server receives an
  ACK with window size 0, it goes to the persist state. It starts
  the persist timer (3 second timer) and waits for the window to open up. When
  the timer expires, it sends a probe message to the client. In response, the
  client sends a Probe-Ack with current window size. As long as the server
  gets ACKs with window size 0, it stays in the persist mode by restarting
  the persist timer. The moment it gets an Probe-ACK with a non-zero
  window value, it comes out of the persist mode and resumes sending packets
  from the next sequence number.

Implementation of Congestion window
-----------------------------------
  Congestion Sliding window is implemented as a circular queue and the state is
  maintained with help of below parameters:

    winSize:        Max sending window size (obtained from server.in)
    cwin:           Current congestion window size
    ssThresh:       SSThresh value
    oldestSeqNum:   Oldest sequence number in window (Points to first unAcked packet)
    nextNewSeqNum:  Next new sequence number to be used
    nextSendSeqNum: Next Sequence number to be sent
    advertisedWin:  Receiver's advertised window size
    additiveAckNum: Ack Num for which we increase Cwin under AIMD

Structure of the message header
-------------------------------

Every packet sent/received by the server/client has the following header:

+-----------------+
|   SEQUENCE(4)   |
|-----------------|
|   ACK_NUMBER(4) |
|-----------------|
|  WINDOW_SIZE(4) |
+-----------------+
|                 |
|     DATA(512)   |
|                 | 
+-----------------+

SEQUENCE:       incremented for every new packet sent

ACK_Number:     represents the next packet client is expecting

WINDOW_SIZE:    Represents the advertized window from client

DATA:           512 bytes data sent/received by server/client


4. Clean termination of the program after file transfer
=======================================================

Server Implementation
---------------------

  When the server gets the  acknowlegdement for the last data packet,
  it sends out a Packet containing the sequence number: FIN_SEQ_NO
  This message type is interpreted by the client as the end of file transfer.
  To which it responds by sending a message with ack number: FIN_ACK_NO
  
  The server process (child) keeps re-transmitting the FIN Message until
  it receives an FIN-ACK from the client or the number of retransmission exceeds
  the maximum retries. 
  
  On recieving FIN-ACK packet the server (child) process exits.

Client Implementation
---------------------
  On Recieving the FIN message from the server, the client sends the FIN_ACK
  to the server and exits gracefully.

We have also introduced a mechanism where server sends an error message with
FIN packet. For e.g., if the requested file is not available on server, an
appropriate message is sent to client with FIN packet.

================================================================================
